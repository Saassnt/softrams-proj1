[0m[1mRefreshing Terraform state in-memory prior to plan...[0m
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.
[0m
[0m[1mmodule.vpc.aws_vpc.cluster_vpc: Refreshing state...[0m
[0m[1mmodule.vpc.aws_subnet.public_subnet_us_east_2a: Refreshing state...[0m
[0m[1mmodule.vpc.aws_security_group.alb_sg: Refreshing state...[0m
[0m[1mmodule.vpc.aws_security_group.app_sg: Refreshing state...[0m
[0m[1mdata.aws_caller_identity.current: Refreshing state...[0m

------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  [32m+[0m create
 [36m<=[0m read (data resources)
[0m
Terraform will perform the following actions:

[1m  # module.ecs.data.template_file.sam_task[0m will be read during apply
  # (config refers to values not yet known)[0m[0m
[0m [36m<=[0m[0m data "template_file" "sam_task"  {
      [32m+[0m [0m[1m[0mid[0m[0m       = (known after apply)
      [32m+[0m [0m[1m[0mrendered[0m[0m = (known after apply)
      [32m+[0m [0m[1m[0mtemplate[0m[0m = <<~EOT
            [
                {
                  "name": "${container_name}",
                  "image": "${image}",
                  "portMappings": [
                    {
                      "containerPort": ${container_port},
                      "hostPort": ${container_port}
                    }
                  ],
                  "cpu": ${desired_task_cpu},
                  "memory": ${desired_task_memory},
                  "networkMode": "awsvpc",
                  "essential": true,
                  "logConfiguration": {
                    "logDriver": "awslogs",
                    "options": {
                      "awslogs-group": "${log_group}",
                      "awslogs-region": "us-east-2",
                      "awslogs-stream-prefix": "${container_name}"
                    }
                  },
                  "environment": [
                    {
                      "name": "ENV",
                      "value": "PROD"
                    },
                    {
                      "name" : "PORT",
                      "value": "${container_port}"
                    }
                  ]
                }
              ]
        EOT
      [32m+[0m [0m[1m[0mvars[0m[0m     = {
          [32m+[0m [0m"container_name"      = "my-assignc"
          [32m+[0m [0m"container_port"      = "80"
          [32m+[0m [0m"desired_task_cpu"    = "256"
          [32m+[0m [0m"desired_task_memory" = "512"
          [32m+[0m [0m"image"               = (known after apply)
          [32m+[0m [0m"log_group"           = "se-cluster-logs"
        }
    }

[1m  # module.ecs.aws_alb.app_alb[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_alb" "app_alb" {
      [32m+[0m [0m[1m[0marn[0m[0m                        = (known after apply)
      [32m+[0m [0m[1m[0marn_suffix[0m[0m                 = (known after apply)
      [32m+[0m [0m[1m[0mdns_name[0m[0m                   = (known after apply)
      [32m+[0m [0m[1m[0mdrop_invalid_header_fields[0m[0m = false
      [32m+[0m [0m[1m[0menable_deletion_protection[0m[0m = false
      [32m+[0m [0m[1m[0menable_http2[0m[0m               = true
      [32m+[0m [0m[1m[0mid[0m[0m                         = (known after apply)
      [32m+[0m [0m[1m[0midle_timeout[0m[0m               = 60
      [32m+[0m [0m[1m[0minternal[0m[0m                   = (known after apply)
      [32m+[0m [0m[1m[0mip_address_type[0m[0m            = (known after apply)
      [32m+[0m [0m[1m[0mload_balancer_type[0m[0m         = "application"
      [32m+[0m [0m[1m[0mname[0m[0m                       = "se-cluster-alb"
      [32m+[0m [0m[1m[0msecurity_groups[0m[0m            = (known after apply)
      [32m+[0m [0m[1m[0msubnets[0m[0m                    = (known after apply)
      [32m+[0m [0m[1m[0mtags[0m[0m                       = {
          [32m+[0m [0m"Environment" = "se-cluster"
          [32m+[0m [0m"Name"        = "se-cluster-alb"
        }
      [32m+[0m [0m[1m[0mvpc_id[0m[0m                     = (known after apply)
      [32m+[0m [0m[1m[0mzone_id[0m[0m                    = (known after apply)

      [32m+[0m [0msubnet_mapping {
          [32m+[0m [0m[1m[0mallocation_id[0m[0m = (known after apply)
          [32m+[0m [0m[1m[0msubnet_id[0m[0m     = (known after apply)
        }
    }

[1m  # module.ecs.aws_alb_listener.web_app[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_alb_listener" "web_app" {
      [32m+[0m [0m[1m[0marn[0m[0m               = (known after apply)
      [32m+[0m [0m[1m[0mid[0m[0m                = (known after apply)
      [32m+[0m [0m[1m[0mload_balancer_arn[0m[0m = (known after apply)
      [32m+[0m [0m[1m[0mport[0m[0m              = 80
      [32m+[0m [0m[1m[0mprotocol[0m[0m          = "HTTP"
      [32m+[0m [0m[1m[0mssl_policy[0m[0m        = (known after apply)

      [32m+[0m [0mdefault_action {
          [32m+[0m [0m[1m[0morder[0m[0m            = (known after apply)
          [32m+[0m [0m[1m[0mtarget_group_arn[0m[0m = (known after apply)
          [32m+[0m [0m[1m[0mtype[0m[0m             = "forward"
        }
    }

[1m  # module.ecs.aws_alb_target_group.api_target_group[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_alb_target_group" "api_target_group" {
      [32m+[0m [0m[1m[0marn[0m[0m                                = (known after apply)
      [32m+[0m [0m[1m[0marn_suffix[0m[0m                         = (known after apply)
      [32m+[0m [0m[1m[0mderegistration_delay[0m[0m               = 300
      [32m+[0m [0m[1m[0mid[0m[0m                                 = (known after apply)
      [32m+[0m [0m[1m[0mlambda_multi_value_headers_enabled[0m[0m = false
      [32m+[0m [0m[1m[0mload_balancing_algorithm_type[0m[0m      = (known after apply)
      [32m+[0m [0m[1m[0mname[0m[0m                               = "se-cluster-alb-target-group"
      [32m+[0m [0m[1m[0mport[0m[0m                               = 80
      [32m+[0m [0m[1m[0mprotocol[0m[0m                           = "HTTP"
      [32m+[0m [0m[1m[0mproxy_protocol_v2[0m[0m                  = false
      [32m+[0m [0m[1m[0mslow_start[0m[0m                         = 0
      [32m+[0m [0m[1m[0mtarget_type[0m[0m                        = "ip"
      [32m+[0m [0m[1m[0mvpc_id[0m[0m                             = (known after apply)

      [32m+[0m [0mhealth_check {
          [32m+[0m [0m[1m[0menabled[0m[0m             = (known after apply)
          [32m+[0m [0m[1m[0mhealthy_threshold[0m[0m   = (known after apply)
          [32m+[0m [0m[1m[0minterval[0m[0m            = (known after apply)
          [32m+[0m [0m[1m[0mmatcher[0m[0m             = (known after apply)
          [32m+[0m [0m[1m[0mpath[0m[0m                = (known after apply)
          [32m+[0m [0m[1m[0mport[0m[0m                = (known after apply)
          [32m+[0m [0m[1m[0mprotocol[0m[0m            = (known after apply)
          [32m+[0m [0m[1m[0mtimeout[0m[0m             = (known after apply)
          [32m+[0m [0m[1m[0munhealthy_threshold[0m[0m = (known after apply)
        }

      [32m+[0m [0mstickiness {
          [32m+[0m [0m[1m[0mcookie_duration[0m[0m = (known after apply)
          [32m+[0m [0m[1m[0menabled[0m[0m         = (known after apply)
          [32m+[0m [0m[1m[0mtype[0m[0m            = (known after apply)
        }
    }

[1m  # module.ecs.aws_appautoscaling_policy.app_down[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_appautoscaling_policy" "app_down" {
      [32m+[0m [0m[1m[0marn[0m[0m                = (known after apply)
      [32m+[0m [0m[1m[0mid[0m[0m                 = (known after apply)
      [32m+[0m [0m[1m[0mname[0m[0m               = "se-cluster-scale-down"
      [32m+[0m [0m[1m[0mpolicy_type[0m[0m        = "StepScaling"
      [32m+[0m [0m[1m[0mresource_id[0m[0m        = "service/se-cluster/se-cluster"
      [32m+[0m [0m[1m[0mscalable_dimension[0m[0m = "ecs:service:DesiredCount"
      [32m+[0m [0m[1m[0mservice_namespace[0m[0m  = "ecs"

      [32m+[0m [0mstep_scaling_policy_configuration {
          [32m+[0m [0m[1m[0madjustment_type[0m[0m         = "ChangeInCapacity"
          [32m+[0m [0m[1m[0mcooldown[0m[0m                = 300
          [32m+[0m [0m[1m[0mmetric_aggregation_type[0m[0m = "Average"

          [32m+[0m [0mstep_adjustment {
              [32m+[0m [0m[1m[0mmetric_interval_upper_bound[0m[0m = "0"
              [32m+[0m [0m[1m[0mscaling_adjustment[0m[0m          = -1
            }
        }
    }

[1m  # module.ecs.aws_appautoscaling_policy.app_up[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_appautoscaling_policy" "app_up" {
      [32m+[0m [0m[1m[0marn[0m[0m                = (known after apply)
      [32m+[0m [0m[1m[0mid[0m[0m                 = (known after apply)
      [32m+[0m [0m[1m[0mname[0m[0m               = "se-cluster-app-scale-up"
      [32m+[0m [0m[1m[0mpolicy_type[0m[0m        = "StepScaling"
      [32m+[0m [0m[1m[0mresource_id[0m[0m        = "service/se-cluster/se-cluster"
      [32m+[0m [0m[1m[0mscalable_dimension[0m[0m = "ecs:service:DesiredCount"
      [32m+[0m [0m[1m[0mservice_namespace[0m[0m  = "ecs"

      [32m+[0m [0mstep_scaling_policy_configuration {
          [32m+[0m [0m[1m[0madjustment_type[0m[0m         = "ChangeInCapacity"
          [32m+[0m [0m[1m[0mcooldown[0m[0m                = 60
          [32m+[0m [0m[1m[0mmetric_aggregation_type[0m[0m = "Average"

          [32m+[0m [0mstep_adjustment {
              [32m+[0m [0m[1m[0mmetric_interval_lower_bound[0m[0m = "0"
              [32m+[0m [0m[1m[0mscaling_adjustment[0m[0m          = 1
            }
        }
    }

[1m  # module.ecs.aws_appautoscaling_target.app_scale_target[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_appautoscaling_target" "app_scale_target" {
      [32m+[0m [0m[1m[0mid[0m[0m                 = (known after apply)
      [32m+[0m [0m[1m[0mmax_capacity[0m[0m       = 4
      [32m+[0m [0m[1m[0mmin_capacity[0m[0m       = 2
      [32m+[0m [0m[1m[0mresource_id[0m[0m        = "service/se-cluster/se-cluster"
      [32m+[0m [0m[1m[0mrole_arn[0m[0m           = (known after apply)
      [32m+[0m [0m[1m[0mscalable_dimension[0m[0m = "ecs:service:DesiredCount"
      [32m+[0m [0m[1m[0mservice_namespace[0m[0m  = "ecs"
    }

[1m  # module.ecs.aws_cloudwatch_log_group.web-app[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "web-app" {
      [32m+[0m [0m[1m[0marn[0m[0m               = (known after apply)
      [32m+[0m [0m[1m[0mid[0m[0m                = (known after apply)
      [32m+[0m [0m[1m[0mname[0m[0m              = "se-cluster-logs"
      [32m+[0m [0m[1m[0mretention_in_days[0m[0m = 0
      [32m+[0m [0m[1m[0mtags[0m[0m              = {
          [32m+[0m [0m"Application" = "se-cluster"
        }
    }

[1m  # module.ecs.aws_cloudwatch_metric_alarm.cpu_utilization_high[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "cpu_utilization_high" {
      [32m+[0m [0m[1m[0mactions_enabled[0m[0m                       = true
      [32m+[0m [0m[1m[0malarm_actions[0m[0m                         = (known after apply)
      [32m+[0m [0m[1m[0malarm_name[0m[0m                            = "se-cluster-CPU-Utilization-High"
      [32m+[0m [0m[1m[0marn[0m[0m                                   = (known after apply)
      [32m+[0m [0m[1m[0mcomparison_operator[0m[0m                   = "GreaterThanOrEqualToThreshold"
      [32m+[0m [0m[1m[0mdimensions[0m[0m                            = {
          [32m+[0m [0m"ClusterName" = "se-cluster"
          [32m+[0m [0m"ServiceName" = "se-cluster"
        }
      [32m+[0m [0m[1m[0mevaluate_low_sample_count_percentiles[0m[0m = (known after apply)
      [32m+[0m [0m[1m[0mevaluation_periods[0m[0m                    = 1
      [32m+[0m [0m[1m[0mid[0m[0m                                    = (known after apply)
      [32m+[0m [0m[1m[0mmetric_name[0m[0m                           = "CPUUtilization"
      [32m+[0m [0m[1m[0mnamespace[0m[0m                             = "AWS/ECS"
      [32m+[0m [0m[1m[0mperiod[0m[0m                                = 60
      [32m+[0m [0m[1m[0mstatistic[0m[0m                             = "Average"
      [32m+[0m [0m[1m[0mthreshold[0m[0m                             = 90
      [32m+[0m [0m[1m[0mtreat_missing_data[0m[0m                    = "missing"
    }

[1m  # module.ecs.aws_cloudwatch_metric_alarm.cpu_utilization_low[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "cpu_utilization_low" {
      [32m+[0m [0m[1m[0mactions_enabled[0m[0m                       = true
      [32m+[0m [0m[1m[0malarm_actions[0m[0m                         = (known after apply)
      [32m+[0m [0m[1m[0malarm_name[0m[0m                            = "se-cluster-CPU-Utilization-Low"
      [32m+[0m [0m[1m[0marn[0m[0m                                   = (known after apply)
      [32m+[0m [0m[1m[0mcomparison_operator[0m[0m                   = "LessThanThreshold"
      [32m+[0m [0m[1m[0mdimensions[0m[0m                            = {
          [32m+[0m [0m"ClusterName" = "se-cluster"
          [32m+[0m [0m"ServiceName" = "se-cluster"
        }
      [32m+[0m [0m[1m[0mevaluate_low_sample_count_percentiles[0m[0m = (known after apply)
      [32m+[0m [0m[1m[0mevaluation_periods[0m[0m                    = 1
      [32m+[0m [0m[1m[0mid[0m[0m                                    = (known after apply)
      [32m+[0m [0m[1m[0mmetric_name[0m[0m                           = "CPUUtilization"
      [32m+[0m [0m[1m[0mnamespace[0m[0m                             = "AWS/ECS"
      [32m+[0m [0m[1m[0mperiod[0m[0m                                = 60
      [32m+[0m [0m[1m[0mstatistic[0m[0m                             = "Average"
      [32m+[0m [0m[1m[0mthreshold[0m[0m                             = 40
      [32m+[0m [0m[1m[0mtreat_missing_data[0m[0m                    = "missing"
    }

[1m  # module.ecs.aws_ecr_repository.web-app[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_ecr_repository" "web-app" {
      [32m+[0m [0m[1m[0marn[0m[0m                  = (known after apply)
      [32m+[0m [0m[1m[0mid[0m[0m                   = (known after apply)
      [32m+[0m [0m[1m[0mimage_tag_mutability[0m[0m = "MUTABLE"
      [32m+[0m [0m[1m[0mname[0m[0m                 = "myrepo1"
      [32m+[0m [0m[1m[0mregistry_id[0m[0m          = (known after apply)
      [32m+[0m [0m[1m[0mrepository_url[0m[0m       = (known after apply)
    }

[1m  # module.ecs.aws_ecs_cluster.cluster[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_ecs_cluster" "cluster" {
      [32m+[0m [0m[1m[0marn[0m[0m  = (known after apply)
      [32m+[0m [0m[1m[0mid[0m[0m   = (known after apply)
      [32m+[0m [0m[1m[0mname[0m[0m = "se-cluster"

      [32m+[0m [0msetting {
          [32m+[0m [0m[1m[0mname[0m[0m  = (known after apply)
          [32m+[0m [0m[1m[0mvalue[0m[0m = (known after apply)
        }
    }

[1m  # module.ecs.aws_ecs_service.web-api[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_ecs_service" "web-api" {
      [32m+[0m [0m[1m[0mcluster[0m[0m                            = (known after apply)
      [32m+[0m [0m[1m[0mdeployment_maximum_percent[0m[0m         = 200
      [32m+[0m [0m[1m[0mdeployment_minimum_healthy_percent[0m[0m = 100
      [32m+[0m [0m[1m[0mdesired_count[0m[0m                      = 2
      [32m+[0m [0m[1m[0menable_ecs_managed_tags[0m[0m            = false
      [32m+[0m [0m[1m[0miam_role[0m[0m                           = (known after apply)
      [32m+[0m [0m[1m[0mid[0m[0m                                 = (known after apply)
      [32m+[0m [0m[1m[0mlaunch_type[0m[0m                        = "FARGATE"
      [32m+[0m [0m[1m[0mname[0m[0m                               = "se-cluster"
      [32m+[0m [0m[1m[0mplatform_version[0m[0m                   = (known after apply)
      [32m+[0m [0m[1m[0mscheduling_strategy[0m[0m                = "REPLICA"
      [32m+[0m [0m[1m[0mtask_definition[0m[0m                    = (known after apply)

      [32m+[0m [0mload_balancer {
          [32m+[0m [0m[1m[0mcontainer_name[0m[0m   = "my-assignc"
          [32m+[0m [0m[1m[0mcontainer_port[0m[0m   = 80
          [32m+[0m [0m[1m[0mtarget_group_arn[0m[0m = (known after apply)
        }

      [32m+[0m [0mnetwork_configuration {
          [32m+[0m [0m[1m[0massign_public_ip[0m[0m = true
          [32m+[0m [0m[1m[0msecurity_groups[0m[0m  = (known after apply)
          [32m+[0m [0m[1m[0msubnets[0m[0m          = (known after apply)
        }

      [32m+[0m [0mplacement_strategy {
          [32m+[0m [0m[1m[0mfield[0m[0m = (known after apply)
          [32m+[0m [0m[1m[0mtype[0m[0m  = (known after apply)
        }
    }

[1m  # module.ecs.aws_ecs_task_definition.web-api[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_ecs_task_definition" "web-api" {
      [32m+[0m [0m[1m[0marn[0m[0m                      = (known after apply)
      [32m+[0m [0m[1m[0mcontainer_definitions[0m[0m    = (known after apply)
      [32m+[0m [0m[1m[0mcpu[0m[0m                      = "256"
      [32m+[0m [0m[1m[0mexecution_role_arn[0m[0m       = (known after apply)
      [32m+[0m [0m[1m[0mfamily[0m[0m                   = "se-cluster_app"
      [32m+[0m [0m[1m[0mid[0m[0m                       = (known after apply)
      [32m+[0m [0m[1m[0mmemory[0m[0m                   = "512"
      [32m+[0m [0m[1m[0mnetwork_mode[0m[0m             = "awsvpc"
      [32m+[0m [0m[1m[0mrequires_compatibilities[0m[0m = [
          [32m+[0m [0m"FARGATE",
        ]
      [32m+[0m [0m[1m[0mrevision[0m[0m                 = (known after apply)
      [32m+[0m [0m[1m[0mtask_role_arn[0m[0m            = (known after apply)
    }

[1m  # module.ecs.aws_iam_role.ecs_execution_role[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_iam_role" "ecs_execution_role" {
      [32m+[0m [0m[1m[0marn[0m[0m                   = (known after apply)
      [32m+[0m [0m[1m[0massume_role_policy[0m[0m    = jsonencode(
            {
              [32m+[0m [0mStatement = [
                  [32m+[0m [0m{
                      [32m+[0m [0mAction    = "sts:AssumeRole"
                      [32m+[0m [0mEffect    = "Allow"
                      [32m+[0m [0mPrincipal = {
                          [32m+[0m [0mService = "ecs-tasks.amazonaws.com"
                        }
                      [32m+[0m [0mSid       = ""
                    },
                ]
              [32m+[0m [0mVersion   = "2012-10-17"
            }
        )
      [32m+[0m [0m[1m[0mcreate_date[0m[0m           = (known after apply)
      [32m+[0m [0m[1m[0mforce_detach_policies[0m[0m = false
      [32m+[0m [0m[1m[0mid[0m[0m                    = (known after apply)
      [32m+[0m [0m[1m[0mmax_session_duration[0m[0m  = 3600
      [32m+[0m [0m[1m[0mname[0m[0m                  = "se-cluster-ecs_task_role"
      [32m+[0m [0m[1m[0mpath[0m[0m                  = "/"
      [32m+[0m [0m[1m[0munique_id[0m[0m             = (known after apply)
    }

[1m  # module.ecs.aws_iam_role_policy.ecs_execution_role_policy[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "ecs_execution_role_policy" {
      [32m+[0m [0m[1m[0mid[0m[0m     = (known after apply)
      [32m+[0m [0m[1m[0mname[0m[0m   = "se-cluster_role_policy"
      [32m+[0m [0m[1m[0mpolicy[0m[0m = jsonencode(
            {
              [32m+[0m [0mStatement = [
                  [32m+[0m [0m{
                      [32m+[0m [0mAction   = [
                          [32m+[0m [0m"ecr:GetAuthorizationToken",
                          [32m+[0m [0m"ecr:BatchCheckLayerAvailability",
                          [32m+[0m [0m"ecr:GetDownloadUrlForLayer",
                          [32m+[0m [0m"ecr:BatchGetImage",
                          [32m+[0m [0m"logs:CreateLogStream",
                          [32m+[0m [0m"logs:PutLogEvents",
                        ]
                      [32m+[0m [0mEffect   = "Allow"
                      [32m+[0m [0mResource = "*"
                    },
                ]
              [32m+[0m [0mVersion   = "2012-10-17"
            }
        )
      [32m+[0m [0m[1m[0mrole[0m[0m   = (known after apply)
    }

[1m  # module.pipeline.data.template_file.buildspec[0m will be read during apply
  # (config refers to values not yet known)[0m[0m
[0m [36m<=[0m[0m data "template_file" "buildspec"  {
      [32m+[0m [0m[1m[0mid[0m[0m       = (known after apply)
      [32m+[0m [0m[1m[0mrendered[0m[0m = (known after apply)
      [32m+[0m [0m[1m[0mtemplate[0m[0m = <<~EOT
            version: 0.2
            
            phases:
              pre_build:
                commands:
                  #- pip install awscli --upgrade --user
                  #- echo `aws --version`
                  #- echo Installing Node 8
                  #- curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -
                  #- apt-get install -y nodejs  
                  - echo Logging in to Amazon ECR...
                  - $(aws ecr get-login --region ${region} --no-include-email)
                  - REPOSITORY_URI=${repository_url}
                  - IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
                  - echo Entered the pre_build phase...
                  #- npm install
              build:
                commands:
                  - echo Build started on `date`
                  #- echo Starting Unit Tests
                  #- npm run unit-test
                  - echo Building the Docker image...
                  - docker build -t $REPOSITORY_URI:latest .
                  - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
              post_build:
                commands:
                  - echo Build completed on `date`
                  - echo Pushing the Docker images...
                  - docker push $REPOSITORY_URI:latest
                  - docker push $REPOSITORY_URI:$IMAGE_TAG
                  - echo Writing image definitions file...
                  - printf '[{"name":"${container_name}","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
                
            artifacts:
              files: imagedefinitions.json
        EOT
      [32m+[0m [0m[1m[0mvars[0m[0m     = {
          [32m+[0m [0m"cluster_name"       = "se-cluster"
          [32m+[0m [0m"container_name"     = "my-assignc"
          [32m+[0m [0m"region"             = "us-east-2"
          [32m+[0m [0m"repository_url"     = (known after apply)
          [32m+[0m [0m"security_group_ids" = (known after apply)
        }
    }

[1m  # module.pipeline.data.template_file.codebuild_policy[0m will be read during apply
  # (config refers to values not yet known)[0m[0m
[0m [36m<=[0m[0m data "template_file" "codebuild_policy"  {
      [32m+[0m [0m[1m[0mid[0m[0m       = (known after apply)
      [32m+[0m [0m[1m[0mrendered[0m[0m = (known after apply)
      [32m+[0m [0m[1m[0mtemplate[0m[0m = jsonencode(
            {
              [32m+[0m [0mStatement = [
                  [32m+[0m [0m{
                      [32m+[0m [0mAction   = [
                          [32m+[0m [0m"logs:CreateLogGroup",
                          [32m+[0m [0m"logs:CreateLogStream",
                          [32m+[0m [0m"logs:PutLogEvents",
                          [32m+[0m [0m"ecr:GetAuthorizationToken",
                          [32m+[0m [0m"ecr:InitiateLayerUpload",
                          [32m+[0m [0m"ecr:UploadLayerPart",
                          [32m+[0m [0m"ecr:CompleteLayerUpload",
                          [32m+[0m [0m"ecr:BatchCheckLayerAvailability",
                          [32m+[0m [0m"ecr:PutImage",
                          [32m+[0m [0m"ecs:RunTask",
                          [32m+[0m [0m"iam:PassRole",
                        ]
                      [32m+[0m [0mEffect   = "Allow"
                      [32m+[0m [0mResource = [
                          [32m+[0m [0m"*",
                        ]
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mAction   = [
                          [32m+[0m [0m"s3:GetObject",
                          [32m+[0m [0m"s3:GetObjectVersion",
                          [32m+[0m [0m"s3:GetBucketVersioning",
                          [32m+[0m [0m"s3:List*",
                          [32m+[0m [0m"s3:PutObject",
                        ]
                      [32m+[0m [0mEffect   = "Allow"
                      [32m+[0m [0mResource = [
                          [32m+[0m [0m"${aws_s3_bucket_arn}",
                          [32m+[0m [0m"${aws_s3_bucket_arn}/*",
                        ]
                    },
                ]
              [32m+[0m [0mVersion   = "2012-10-17"
            }
        )
      [32m+[0m [0m[1m[0mvars[0m[0m     = {
          [32m+[0m [0m"aws_s3_bucket_arn" = (known after apply)
        }
    }

[1m  # module.pipeline.data.template_file.codepipeline_policy[0m will be read during apply
  # (config refers to values not yet known)[0m[0m
[0m [36m<=[0m[0m data "template_file" "codepipeline_policy"  {
      [32m+[0m [0m[1m[0mid[0m[0m       = (known after apply)
      [32m+[0m [0m[1m[0mrendered[0m[0m = (known after apply)
      [32m+[0m [0m[1m[0mtemplate[0m[0m = jsonencode(
            {
              [32m+[0m [0mStatement = [
                  [32m+[0m [0m{
                      [32m+[0m [0mAction   = [
                          [32m+[0m [0m"s3:GetObject",
                          [32m+[0m [0m"s3:GetObjectVersion",
                          [32m+[0m [0m"s3:GetBucketVersioning",
                          [32m+[0m [0m"s3:List*",
                          [32m+[0m [0m"s3:PutObject",
                        ]
                      [32m+[0m [0mEffect   = "Allow"
                      [32m+[0m [0mResource = [
                          [32m+[0m [0m"${aws_s3_bucket_arn}",
                          [32m+[0m [0m"${aws_s3_bucket_arn}/*",
                        ]
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mAction   = [
                          [32m+[0m [0m"codebuild:BatchGetBuilds",
                          [32m+[0m [0m"codebuild:StartBuild",
                        ]
                      [32m+[0m [0mEffect   = "Allow"
                      [32m+[0m [0mResource = "*"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mAction   = [
                          [32m+[0m [0m"ecs:*",
                          [32m+[0m [0m"events:DescribeRule",
                          [32m+[0m [0m"events:DeleteRule",
                          [32m+[0m [0m"events:ListRuleNamesByTarget",
                          [32m+[0m [0m"events:ListTargetsByRule",
                          [32m+[0m [0m"events:PutRule",
                          [32m+[0m [0m"events:PutTargets",
                          [32m+[0m [0m"events:RemoveTargets",
                          [32m+[0m [0m"iam:ListAttachedRolePolicies",
                          [32m+[0m [0m"iam:ListInstanceProfiles",
                          [32m+[0m [0m"iam:ListRoles",
                          [32m+[0m [0m"logs:CreateLogGroup",
                          [32m+[0m [0m"logs:DescribeLogGroups",
                          [32m+[0m [0m"logs:FilterLogEvents",
                        ]
                      [32m+[0m [0mEffect   = "Allow"
                      [32m+[0m [0mResource = "*"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mAction    = "iam:PassRole"
                      [32m+[0m [0mCondition = {
                          [32m+[0m [0mStringLike = {
                              [32m+[0m [0miam:PassedToService = "ecs-tasks.amazonaws.com"
                            }
                        }
                      [32m+[0m [0mEffect    = "Allow"
                      [32m+[0m [0mResource  = [
                          [32m+[0m [0m"*",
                        ]
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mAction    = "iam:PassRole"
                      [32m+[0m [0mCondition = {
                          [32m+[0m [0mStringLike = {
                              [32m+[0m [0miam:PassedToService = [
                                  [32m+[0m [0m"ec2.amazonaws.com",
                                  [32m+[0m [0m"ec2.amazonaws.com.cn",
                                ]
                            }
                        }
                      [32m+[0m [0mEffect    = "Allow"
                      [32m+[0m [0mResource  = [
                          [32m+[0m [0m"arn:aws:iam::*:role/ecsInstanceRole*",
                        ]
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mAction    = "iam:PassRole"
                      [32m+[0m [0mCondition = {
                          [32m+[0m [0mStringLike = {
                              [32m+[0m [0miam:PassedToService = [
                                  [32m+[0m [0m"application-autoscaling.amazonaws.com",
                                  [32m+[0m [0m"application-autoscaling.amazonaws.com.cn",
                                ]
                            }
                        }
                      [32m+[0m [0mEffect    = "Allow"
                      [32m+[0m [0mResource  = [
                          [32m+[0m [0m"arn:aws:iam::*:role/ecsAutoscaleRole*",
                        ]
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mAction    = "iam:CreateServiceLinkedRole"
                      [32m+[0m [0mCondition = {
                          [32m+[0m [0mStringLike = {
                              [32m+[0m [0miam:AWSServiceName = [
                                  [32m+[0m [0m"ecs.amazonaws.com",
                                  [32m+[0m [0m"spot.amazonaws.com",
                                  [32m+[0m [0m"spotfleet.amazonaws.com",
                                ]
                            }
                        }
                      [32m+[0m [0mEffect    = "Allow"
                      [32m+[0m [0mResource  = "*"
                    },
                ]
              [32m+[0m [0mVersion   = "2012-10-17"
            }
        )
      [32m+[0m [0m[1m[0mvars[0m[0m     = {
          [32m+[0m [0m"aws_s3_bucket_arn" = (known after apply)
        }
    }

[1m  # module.pipeline.aws_codebuild_project.app_build[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_codebuild_project" "app_build" {
      [32m+[0m [0m[1m[0marn[0m[0m            = (known after apply)
      [32m+[0m [0m[1m[0mbadge_enabled[0m[0m  = false
      [32m+[0m [0m[1m[0mbadge_url[0m[0m      = (known after apply)
      [32m+[0m [0m[1m[0mbuild_timeout[0m[0m  = 60
      [32m+[0m [0m[1m[0mdescription[0m[0m    = (known after apply)
      [32m+[0m [0m[1m[0mencryption_key[0m[0m = (known after apply)
      [32m+[0m [0m[1m[0mid[0m[0m             = (known after apply)
      [32m+[0m [0m[1m[0mname[0m[0m           = "se-cluster-codebuild"
      [32m+[0m [0m[1m[0mqueued_timeout[0m[0m = 480
      [32m+[0m [0m[1m[0mservice_role[0m[0m   = (known after apply)

      [32m+[0m [0martifacts {
          [32m+[0m [0m[1m[0mencryption_disabled[0m[0m    = false
          [32m+[0m [0m[1m[0moverride_artifact_name[0m[0m = false
          [32m+[0m [0m[1m[0mtype[0m[0m                   = "CODEPIPELINE"
        }

      [32m+[0m [0menvironment {
          [32m+[0m [0m[1m[0mcompute_type[0m[0m                = "BUILD_GENERAL1_SMALL"
          [32m+[0m [0m[1m[0mimage[0m[0m                       = "aws/codebuild/docker:17.09.0"
          [32m+[0m [0m[1m[0mimage_pull_credentials_type[0m[0m = "CODEBUILD"
          [32m+[0m [0m[1m[0mprivileged_mode[0m[0m             = true
          [32m+[0m [0m[1m[0mtype[0m[0m                        = "LINUX_CONTAINER"

          [32m+[0m [0menvironment_variable {
              [32m+[0m [0m[1m[0mname[0m[0m  = (known after apply)
              [32m+[0m [0m[1m[0mtype[0m[0m  = (known after apply)
              [32m+[0m [0m[1m[0mvalue[0m[0m = (known after apply)
            }
        }

      [32m+[0m [0msource {
          [32m+[0m [0m[1m[0mbuildspec[0m[0m = (known after apply)
          [32m+[0m [0m[1m[0mtype[0m[0m      = "CODEPIPELINE"
        }
    }

[1m  # module.pipeline.aws_codepipeline.pipeline[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_codepipeline" "pipeline" {
      [32m+[0m [0m[1m[0marn[0m[0m      = (known after apply)
      [32m+[0m [0m[1m[0mid[0m[0m       = (known after apply)
      [32m+[0m [0m[1m[0mname[0m[0m     = "se-cluster-pipeline"
      [32m+[0m [0m[1m[0mrole_arn[0m[0m = (known after apply)

      [32m+[0m [0martifact_store {
          [32m+[0m [0m[1m[0mlocation[0m[0m = "se-cluster-411218437052-pipeline"
          [32m+[0m [0m[1m[0mtype[0m[0m     = "S3"
        }

      [32m+[0m [0mstage {
          [32m+[0m [0m[1m[0mname[0m[0m = "Source"

          [32m+[0m [0maction {
              [32m+[0m [0m[1m[0mcategory[0m[0m         = "Source"
              [32m+[0m [0m[1m[0mconfiguration[0m[0m    = {
                  [32m+[0m [0m"Branch"     = "master"
                  [32m+[0m [0m"OAuthToken" = "71071c354ee62faf8e646d7b4b1f68edc9e49e2f"
                  [32m+[0m [0m"Owner"      = "Saassnt"
                  [32m+[0m [0m"Repo"       = "cicd"
                }
              [32m+[0m [0m[1m[0mname[0m[0m             = "Source"
              [32m+[0m [0m[1m[0moutput_artifacts[0m[0m = [
                  [32m+[0m [0m"source",
                ]
              [32m+[0m [0m[1m[0mowner[0m[0m            = "ThirdParty"
              [32m+[0m [0m[1m[0mprovider[0m[0m         = "GitHub"
              [32m+[0m [0m[1m[0mrun_order[0m[0m        = (known after apply)
              [32m+[0m [0m[1m[0mversion[0m[0m          = "1"
            }
        }
      [32m+[0m [0mstage {
          [32m+[0m [0m[1m[0mname[0m[0m = "Build"

          [32m+[0m [0maction {
              [32m+[0m [0m[1m[0mcategory[0m[0m         = "Build"
              [32m+[0m [0m[1m[0mconfiguration[0m[0m    = {
                  [32m+[0m [0m"ProjectName" = "se-cluster-codebuild"
                }
              [32m+[0m [0m[1m[0minput_artifacts[0m[0m  = [
                  [32m+[0m [0m"source",
                ]
              [32m+[0m [0m[1m[0mname[0m[0m             = "Build"
              [32m+[0m [0m[1m[0moutput_artifacts[0m[0m = [
                  [32m+[0m [0m"imagedefinitions",
                ]
              [32m+[0m [0m[1m[0mowner[0m[0m            = "AWS"
              [32m+[0m [0m[1m[0mprovider[0m[0m         = "CodeBuild"
              [32m+[0m [0m[1m[0mrun_order[0m[0m        = (known after apply)
              [32m+[0m [0m[1m[0mversion[0m[0m          = "1"
            }
        }
      [32m+[0m [0mstage {
          [32m+[0m [0m[1m[0mname[0m[0m = "Production"

          [32m+[0m [0maction {
              [32m+[0m [0m[1m[0mcategory[0m[0m        = "Deploy"
              [32m+[0m [0m[1m[0mconfiguration[0m[0m   = {
                  [32m+[0m [0m"ClusterName" = "se-cluster"
                  [32m+[0m [0m"FileName"    = "imagedefinitions.json"
                  [32m+[0m [0m"ServiceName" = "se-cluster"
                }
              [32m+[0m [0m[1m[0minput_artifacts[0m[0m = [
                  [32m+[0m [0m"imagedefinitions",
                ]
              [32m+[0m [0m[1m[0mname[0m[0m            = "Deploy"
              [32m+[0m [0m[1m[0mowner[0m[0m           = "AWS"
              [32m+[0m [0m[1m[0mprovider[0m[0m        = "ECS"
              [32m+[0m [0m[1m[0mrun_order[0m[0m       = (known after apply)
              [32m+[0m [0m[1m[0mversion[0m[0m         = "1"
            }
        }
    }

[1m  # module.pipeline.aws_codepipeline_webhook.pipeline[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_codepipeline_webhook" "pipeline" {
      [32m+[0m [0m[1m[0mauthentication[0m[0m  = "GITHUB_HMAC"
      [32m+[0m [0m[1m[0mid[0m[0m              = (known after apply)
      [32m+[0m [0m[1m[0mname[0m[0m            = "test-webhook-github-pipeline"
      [32m+[0m [0m[1m[0mtarget_action[0m[0m   = "Source"
      [32m+[0m [0m[1m[0mtarget_pipeline[0m[0m = "se-cluster-pipeline"
      [32m+[0m [0m[1m[0murl[0m[0m             = (known after apply)

      [32m+[0m [0mauthentication_configuration {
          [32m+[0m [0m[1m[0msecret_token[0m[0m = (sensitive value)
        }

      [32m+[0m [0mfilter {
          [32m+[0m [0m[1m[0mjson_path[0m[0m    = "$.ref"
          [32m+[0m [0m[1m[0mmatch_equals[0m[0m = "refs/heads/{Branch}"
        }
    }

[1m  # module.pipeline.aws_iam_role.codebuild_role[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_iam_role" "codebuild_role" {
      [32m+[0m [0m[1m[0marn[0m[0m                   = (known after apply)
      [32m+[0m [0m[1m[0massume_role_policy[0m[0m    = jsonencode(
            {
              [32m+[0m [0mStatement = [
                  [32m+[0m [0m{
                      [32m+[0m [0mAction    = "sts:AssumeRole"
                      [32m+[0m [0mEffect    = "Allow"
                      [32m+[0m [0mPrincipal = {
                          [32m+[0m [0mService = "codebuild.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m [0mVersion   = "2012-10-17"
            }
        )
      [32m+[0m [0m[1m[0mcreate_date[0m[0m           = (known after apply)
      [32m+[0m [0m[1m[0mforce_detach_policies[0m[0m = false
      [32m+[0m [0m[1m[0mid[0m[0m                    = (known after apply)
      [32m+[0m [0m[1m[0mmax_session_duration[0m[0m  = 3600
      [32m+[0m [0m[1m[0mname[0m[0m                  = "codebuild-se-cluster-role"
      [32m+[0m [0m[1m[0mpath[0m[0m                  = "/"
      [32m+[0m [0m[1m[0munique_id[0m[0m             = (known after apply)
    }

[1m  # module.pipeline.aws_iam_role.codepipeline_role[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_iam_role" "codepipeline_role" {
      [32m+[0m [0m[1m[0marn[0m[0m                   = (known after apply)
      [32m+[0m [0m[1m[0massume_role_policy[0m[0m    = jsonencode(
            {
              [32m+[0m [0mStatement = [
                  [32m+[0m [0m{
                      [32m+[0m [0mAction    = "sts:AssumeRole"
                      [32m+[0m [0mEffect    = "Allow"
                      [32m+[0m [0mPrincipal = {
                          [32m+[0m [0mService = "codepipeline.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m [0mVersion   = "2012-10-17"
            }
        )
      [32m+[0m [0m[1m[0mcreate_date[0m[0m           = (known after apply)
      [32m+[0m [0m[1m[0mforce_detach_policies[0m[0m = false
      [32m+[0m [0m[1m[0mid[0m[0m                    = (known after apply)
      [32m+[0m [0m[1m[0mmax_session_duration[0m[0m  = 3600
      [32m+[0m [0m[1m[0mname[0m[0m                  = "codepipeline-se-cluster-role"
      [32m+[0m [0m[1m[0mpath[0m[0m                  = "/"
      [32m+[0m [0m[1m[0munique_id[0m[0m             = (known after apply)
    }

[1m  # module.pipeline.aws_iam_role_policy.codebuild_policy[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "codebuild_policy" {
      [32m+[0m [0m[1m[0mid[0m[0m     = (known after apply)
      [32m+[0m [0m[1m[0mname[0m[0m   = "codebuild-se-cluster-policy"
      [32m+[0m [0m[1m[0mpolicy[0m[0m = (known after apply)
      [32m+[0m [0m[1m[0mrole[0m[0m   = (known after apply)
    }

[1m  # module.pipeline.aws_iam_role_policy.codepipeline_policy[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "codepipeline_policy" {
      [32m+[0m [0m[1m[0mid[0m[0m     = (known after apply)
      [32m+[0m [0m[1m[0mname[0m[0m   = "codepipeline-se-cluster-policy"
      [32m+[0m [0m[1m[0mpolicy[0m[0m = (known after apply)
      [32m+[0m [0m[1m[0mrole[0m[0m   = (known after apply)
    }

[1m  # module.pipeline.aws_s3_bucket.source[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_s3_bucket" "source" {
      [32m+[0m [0m[1m[0macceleration_status[0m[0m         = (known after apply)
      [32m+[0m [0m[1m[0macl[0m[0m                         = "private"
      [32m+[0m [0m[1m[0marn[0m[0m                         = (known after apply)
      [32m+[0m [0m[1m[0mbucket[0m[0m                      = "se-cluster-411218437052-pipeline"
      [32m+[0m [0m[1m[0mbucket_domain_name[0m[0m          = (known after apply)
      [32m+[0m [0m[1m[0mbucket_regional_domain_name[0m[0m = (known after apply)
      [32m+[0m [0m[1m[0mforce_destroy[0m[0m               = true
      [32m+[0m [0m[1m[0mhosted_zone_id[0m[0m              = (known after apply)
      [32m+[0m [0m[1m[0mid[0m[0m                          = (known after apply)
      [32m+[0m [0m[1m[0mregion[0m[0m                      = (known after apply)
      [32m+[0m [0m[1m[0mrequest_payer[0m[0m               = (known after apply)
      [32m+[0m [0m[1m[0mwebsite_domain[0m[0m              = (known after apply)
      [32m+[0m [0m[1m[0mwebsite_endpoint[0m[0m            = (known after apply)

      [32m+[0m [0mversioning {
          [32m+[0m [0m[1m[0menabled[0m[0m    = (known after apply)
          [32m+[0m [0m[1m[0mmfa_delete[0m[0m = (known after apply)
        }
    }

[1m  # module.pipeline.github_repository_webhook.pipeline[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "github_repository_webhook" "pipeline" {
      [32m+[0m [0m[1m[0mactive[0m[0m     = true
      [32m+[0m [0m[1m[0metag[0m[0m       = (known after apply)
      [32m+[0m [0m[1m[0mevents[0m[0m     = [
          [32m+[0m [0m"push",
        ]
      [32m+[0m [0m[1m[0mid[0m[0m         = (known after apply)
      [32m+[0m [0m[1m[0mrepository[0m[0m = "cicd"
      [32m+[0m [0m[1m[0murl[0m[0m        = (known after apply)

      [32m+[0m [0mconfiguration {
          [32m+[0m [0m[1m[0mcontent_type[0m[0m = "json"
          [32m+[0m [0m[1m[0minsecure_ssl[0m[0m = true
          [32m+[0m [0m[1m[0msecret[0m[0m       = (sensitive value)
          [32m+[0m [0m[1m[0murl[0m[0m          = (known after apply)
        }
    }

[1m  # module.vpc.aws_internet_gateway.gw[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_internet_gateway" "gw" {
      [32m+[0m [0m[1m[0mid[0m[0m       = (known after apply)
      [32m+[0m [0m[1m[0mowner_id[0m[0m = (known after apply)
      [32m+[0m [0m[1m[0mtags[0m[0m     = {
          [32m+[0m [0m"Name" = "se-cluster-igw"
        }
      [32m+[0m [0m[1m[0mvpc_id[0m[0m   = (known after apply)
    }

[1m  # module.vpc.aws_route.internet_access[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_route" "internet_access" {
      [32m+[0m [0m[1m[0mdestination_cidr_block[0m[0m     = "0.0.0.0/0"
      [32m+[0m [0m[1m[0mdestination_prefix_list_id[0m[0m = (known after apply)
      [32m+[0m [0m[1m[0megress_only_gateway_id[0m[0m     = (known after apply)
      [32m+[0m [0m[1m[0mgateway_id[0m[0m                 = (known after apply)
      [32m+[0m [0m[1m[0mid[0m[0m                         = (known after apply)
      [32m+[0m [0m[1m[0minstance_id[0m[0m                = (known after apply)
      [32m+[0m [0m[1m[0minstance_owner_id[0m[0m          = (known after apply)
      [32m+[0m [0m[1m[0mnat_gateway_id[0m[0m             = (known after apply)
      [32m+[0m [0m[1m[0mnetwork_interface_id[0m[0m       = (known after apply)
      [32m+[0m [0m[1m[0morigin[0m[0m                     = (known after apply)
      [32m+[0m [0m[1m[0mroute_table_id[0m[0m             = (known after apply)
      [32m+[0m [0m[1m[0mstate[0m[0m                      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.public_subnet_us_east_2a_association[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_route_table_association" "public_subnet_us_east_2a_association" {
      [32m+[0m [0m[1m[0mid[0m[0m             = (known after apply)
      [32m+[0m [0m[1m[0mroute_table_id[0m[0m = (known after apply)
      [32m+[0m [0m[1m[0msubnet_id[0m[0m      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.public_subnet_us_east_2b_association[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_route_table_association" "public_subnet_us_east_2b_association" {
      [32m+[0m [0m[1m[0mid[0m[0m             = (known after apply)
      [32m+[0m [0m[1m[0mroute_table_id[0m[0m = (known after apply)
      [32m+[0m [0m[1m[0msubnet_id[0m[0m      = (known after apply)
    }

[1m  # module.vpc.aws_security_group.alb_sg[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_security_group" "alb_sg" {
      [32m+[0m [0m[1m[0marn[0m[0m                    = (known after apply)
      [32m+[0m [0m[1m[0mdescription[0m[0m            = "ALB Security Group"
      [32m+[0m [0m[1m[0megress[0m[0m                 = [
          [32m+[0m [0m{
              [32m+[0m [0mcidr_blocks      = [
                  [32m+[0m [0m"0.0.0.0/0",
                ]
              [32m+[0m [0mdescription      = ""
              [32m+[0m [0mfrom_port        = 0
              [32m+[0m [0mipv6_cidr_blocks = []
              [32m+[0m [0mprefix_list_ids  = []
              [32m+[0m [0mprotocol         = "-1"
              [32m+[0m [0msecurity_groups  = []
              [32m+[0m [0mself             = false
              [32m+[0m [0mto_port          = 0
            },
        ]
      [32m+[0m [0m[1m[0mid[0m[0m                     = (known after apply)
      [32m+[0m [0m[1m[0mingress[0m[0m                = [
          [32m+[0m [0m{
              [32m+[0m [0mcidr_blocks      = [
                  [32m+[0m [0m"0.0.0.0/0",
                ]
              [32m+[0m [0mdescription      = ""
              [32m+[0m [0mfrom_port        = 80
              [32m+[0m [0mipv6_cidr_blocks = []
              [32m+[0m [0mprefix_list_ids  = []
              [32m+[0m [0mprotocol         = "tcp"
              [32m+[0m [0msecurity_groups  = []
              [32m+[0m [0mself             = false
              [32m+[0m [0mto_port          = 80
            },
          [32m+[0m [0m{
              [32m+[0m [0mcidr_blocks      = [
                  [32m+[0m [0m"0.0.0.0/0",
                ]
              [32m+[0m [0mdescription      = ""
              [32m+[0m [0mfrom_port        = 8
              [32m+[0m [0mipv6_cidr_blocks = []
              [32m+[0m [0mprefix_list_ids  = []
              [32m+[0m [0mprotocol         = "icmp"
              [32m+[0m [0msecurity_groups  = []
              [32m+[0m [0mself             = false
              [32m+[0m [0mto_port          = 0
            },
        ]
      [32m+[0m [0m[1m[0mname[0m[0m                   = "se-cluster-alb-sg"
      [32m+[0m [0m[1m[0mowner_id[0m[0m               = (known after apply)
      [32m+[0m [0m[1m[0mrevoke_rules_on_delete[0m[0m = false
      [32m+[0m [0m[1m[0mtags[0m[0m                   = {
          [32m+[0m [0m"Name" = "se-cluster-alb-sg"
        }
      [32m+[0m [0m[1m[0mvpc_id[0m[0m                 = (known after apply)
    }

[1m  # module.vpc.aws_security_group.app_sg[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_security_group" "app_sg" {
      [32m+[0m [0m[1m[0marn[0m[0m                    = (known after apply)
      [32m+[0m [0m[1m[0mdescription[0m[0m            = "Default security group to allow inbound/outbound from the VPC"
      [32m+[0m [0m[1m[0megress[0m[0m                 = [
          [32m+[0m [0m{
              [32m+[0m [0mcidr_blocks      = []
              [32m+[0m [0mdescription      = ""
              [32m+[0m [0mfrom_port        = 0
              [32m+[0m [0mipv6_cidr_blocks = []
              [32m+[0m [0mprefix_list_ids  = []
              [32m+[0m [0mprotocol         = "-1"
              [32m+[0m [0msecurity_groups  = []
              [32m+[0m [0mself             = true
              [32m+[0m [0mto_port          = 0
            },
        ]
      [32m+[0m [0m[1m[0mid[0m[0m                     = (known after apply)
      [32m+[0m [0m[1m[0mingress[0m[0m                = [
          [32m+[0m [0m{
              [32m+[0m [0mcidr_blocks      = []
              [32m+[0m [0mdescription      = ""
              [32m+[0m [0mfrom_port        = 0
              [32m+[0m [0mipv6_cidr_blocks = []
              [32m+[0m [0mprefix_list_ids  = []
              [32m+[0m [0mprotocol         = "-1"
              [32m+[0m [0msecurity_groups  = []
              [32m+[0m [0mself             = true
              [32m+[0m [0mto_port          = 0
            },
        ]
      [32m+[0m [0m[1m[0mname[0m[0m                   = "se-cluster-app-sg"
      [32m+[0m [0m[1m[0mowner_id[0m[0m               = (known after apply)
      [32m+[0m [0m[1m[0mrevoke_rules_on_delete[0m[0m = false
      [32m+[0m [0m[1m[0mtags[0m[0m                   = {
          [32m+[0m [0m"Environment" = "se-cluster"
        }
      [32m+[0m [0m[1m[0mvpc_id[0m[0m                 = (known after apply)
    }

[1m  # module.vpc.aws_security_group.ecs_sg[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_security_group" "ecs_sg" {
      [32m+[0m [0m[1m[0marn[0m[0m                    = (known after apply)
      [32m+[0m [0m[1m[0mdescription[0m[0m            = "Allow egress from container"
      [32m+[0m [0m[1m[0megress[0m[0m                 = [
          [32m+[0m [0m{
              [32m+[0m [0mcidr_blocks      = [
                  [32m+[0m [0m"0.0.0.0/0",
                ]
              [32m+[0m [0mdescription      = ""
              [32m+[0m [0mfrom_port        = 0
              [32m+[0m [0mipv6_cidr_blocks = []
              [32m+[0m [0mprefix_list_ids  = []
              [32m+[0m [0mprotocol         = "-1"
              [32m+[0m [0msecurity_groups  = []
              [32m+[0m [0mself             = false
              [32m+[0m [0mto_port          = 0
            },
        ]
      [32m+[0m [0m[1m[0mid[0m[0m                     = (known after apply)
      [32m+[0m [0m[1m[0mingress[0m[0m                = [
          [32m+[0m [0m{
              [32m+[0m [0mcidr_blocks      = [
                  [32m+[0m [0m"0.0.0.0/0",
                ]
              [32m+[0m [0mdescription      = ""
              [32m+[0m [0mfrom_port        = 8
              [32m+[0m [0mipv6_cidr_blocks = []
              [32m+[0m [0mprefix_list_ids  = []
              [32m+[0m [0mprotocol         = "icmp"
              [32m+[0m [0msecurity_groups  = []
              [32m+[0m [0mself             = false
              [32m+[0m [0mto_port          = 0
            },
        ]
      [32m+[0m [0m[1m[0mname[0m[0m                   = "se-cluster-ecs-service-sg"
      [32m+[0m [0m[1m[0mowner_id[0m[0m               = (known after apply)
      [32m+[0m [0m[1m[0mrevoke_rules_on_delete[0m[0m = false
      [32m+[0m [0m[1m[0mtags[0m[0m                   = {
          [32m+[0m [0m"Environment" = "se-cluster"
          [32m+[0m [0m"Name"        = "se-cluster-ecs-service-sg"
        }
      [32m+[0m [0m[1m[0mvpc_id[0m[0m                 = (known after apply)
    }

[1m  # module.vpc.aws_subnet.public_subnet_us_east_2a[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_subnet" "public_subnet_us_east_2a" {
      [32m+[0m [0m[1m[0marn[0m[0m                             = (known after apply)
      [32m+[0m [0m[1m[0massign_ipv6_address_on_creation[0m[0m = false
      [32m+[0m [0m[1m[0mavailability_zone[0m[0m               = "us-east-2a"
      [32m+[0m [0m[1m[0mavailability_zone_id[0m[0m            = (known after apply)
      [32m+[0m [0m[1m[0mcidr_block[0m[0m                      = "10.10.16.0/20"
      [32m+[0m [0m[1m[0mid[0m[0m                              = (known after apply)
      [32m+[0m [0m[1m[0mipv6_cidr_block[0m[0m                 = (known after apply)
      [32m+[0m [0m[1m[0mipv6_cidr_block_association_id[0m[0m  = (known after apply)
      [32m+[0m [0m[1m[0mmap_public_ip_on_launch[0m[0m         = true
      [32m+[0m [0m[1m[0mowner_id[0m[0m                        = (known after apply)
      [32m+[0m [0m[1m[0mtags[0m[0m                            = {
          [32m+[0m [0m"Name" = "se-cluster-public-subnet-2a"
        }
      [32m+[0m [0m[1m[0mvpc_id[0m[0m                          = (known after apply)
    }

[1m  # module.vpc.aws_subnet.public_subnet_us_east_2b[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_subnet" "public_subnet_us_east_2b" {
      [32m+[0m [0m[1m[0marn[0m[0m                             = (known after apply)
      [32m+[0m [0m[1m[0massign_ipv6_address_on_creation[0m[0m = false
      [32m+[0m [0m[1m[0mavailability_zone[0m[0m               = "us-east-2b"
      [32m+[0m [0m[1m[0mavailability_zone_id[0m[0m            = (known after apply)
      [32m+[0m [0m[1m[0mcidr_block[0m[0m                      = "10.10.32.0/20"
      [32m+[0m [0m[1m[0mid[0m[0m                              = (known after apply)
      [32m+[0m [0m[1m[0mipv6_cidr_block[0m[0m                 = (known after apply)
      [32m+[0m [0m[1m[0mipv6_cidr_block_association_id[0m[0m  = (known after apply)
      [32m+[0m [0m[1m[0mmap_public_ip_on_launch[0m[0m         = true
      [32m+[0m [0m[1m[0mowner_id[0m[0m                        = (known after apply)
      [32m+[0m [0m[1m[0mtags[0m[0m                            = {
          [32m+[0m [0m"Name" = "se-cluster-public-subnet-2b"
        }
      [32m+[0m [0m[1m[0mvpc_id[0m[0m                          = (known after apply)
    }

[1m  # module.vpc.aws_vpc.cluster_vpc[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_vpc" "cluster_vpc" {
      [32m+[0m [0m[1m[0marn[0m[0m                              = (known after apply)
      [32m+[0m [0m[1m[0massign_generated_ipv6_cidr_block[0m[0m = false
      [32m+[0m [0m[1m[0mcidr_block[0m[0m                       = "10.10.0.0/16"
      [32m+[0m [0m[1m[0mdefault_network_acl_id[0m[0m           = (known after apply)
      [32m+[0m [0m[1m[0mdefault_route_table_id[0m[0m           = (known after apply)
      [32m+[0m [0m[1m[0mdefault_security_group_id[0m[0m        = (known after apply)
      [32m+[0m [0m[1m[0mdhcp_options_id[0m[0m                  = (known after apply)
      [32m+[0m [0m[1m[0menable_classiclink[0m[0m               = (known after apply)
      [32m+[0m [0m[1m[0menable_classiclink_dns_support[0m[0m   = (known after apply)
      [32m+[0m [0m[1m[0menable_dns_hostnames[0m[0m             = true
      [32m+[0m [0m[1m[0menable_dns_support[0m[0m               = true
      [32m+[0m [0m[1m[0mid[0m[0m                               = (known after apply)
      [32m+[0m [0m[1m[0minstance_tenancy[0m[0m                 = "default"
      [32m+[0m [0m[1m[0mipv6_association_id[0m[0m              = (known after apply)
      [32m+[0m [0m[1m[0mipv6_cidr_block[0m[0m                  = (known after apply)
      [32m+[0m [0m[1m[0mmain_route_table_id[0m[0m              = (known after apply)
      [32m+[0m [0m[1m[0mowner_id[0m[0m                         = (known after apply)
      [32m+[0m [0m[1m[0mtags[0m[0m                             = {
          [32m+[0m [0m"Name" = "se-cluster-vpc"
        }
    }

[0m[1mPlan:[0m 34 to add, 0 to change, 0 to destroy.[0m

------------------------------------------------------------------------

Note: You didn't specify an "-out" parameter to save this plan, so Terraform
can't guarantee that exactly these actions will be performed if
"terraform apply" is subsequently run.

